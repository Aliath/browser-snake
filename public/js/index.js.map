{"version":3,"file":"index.js","sources":["../../src/lib/EventEmitter.ts","../../src/core/Snake.ts","../../src/core/SceneManager.ts","../../src/core/Renderer.ts","../../src/core/Game.ts","../../src/utils/colors.ts","../../src/index.ts"],"sourcesContent":["type Handler = (payload?: any) => any;\r\nconst _handlers: Record<string, Handler[]> = {};\r\n\r\nclass EventEmitter {\r\n    on(eventName: string, handler: Handler) {\r\n        const currentHandlers = _handlers[eventName];\r\n        const newHandlers = currentHandlers ? [...currentHandlers, handler] : [handler];\r\n\r\n        _handlers[eventName] = newHandlers;\r\n    }\r\n\r\n    off(eventName: string, handler: Handler) {\r\n        _handlers[eventName] = _handlers[eventName].filter(item => item !== handler);\r\n    }\r\n\r\n    emit(eventName: string, payload: any) {\r\n        const handlers = _handlers[eventName];\r\n        if (!handlers) return;\r\n        \r\n        handlers.forEach(handler => handler(payload));\r\n    }\r\n}\r\n\r\nexport default new EventEmitter();","import EventEmitter from \"../lib/EventEmitter\";\r\n\r\nexport enum SnakeElementDirection {\r\n    HORIZONTAL,\r\n    VERTICAL\r\n};\r\n\r\nexport interface SnakeElement {\r\n    direction: SnakeElementDirection;\r\n    anchor: [number, number];\r\n    length: number;\r\n}\r\n\r\nexport class Snake {\r\n    elements: SnakeElement[];\r\n\r\n    constructor() {\r\n        this.handleRenderEvents();\r\n    }\r\n\r\n    private handleRenderEvents(): void {\r\n        EventEmitter.on('startRender', ([width, height]: number[]) => {\r\n            this.reset([Math.floor(width / 2), Math.floor(height / 2)]);\r\n        });\r\n    }\r\n\r\n    public getElements(): SnakeElement[] {\r\n        return JSON.parse(JSON.stringify(this.elements)) as SnakeElement[];\r\n    }\r\n\r\n    public reset(startCoordinates: [number, number]): void {\r\n        const [anchorX, anchorY] = startCoordinates;\r\n\r\n        this.elements = [\r\n            {\r\n                direction: SnakeElementDirection.HORIZONTAL,\r\n                anchor: [anchorX, anchorY],\r\n                length: 1\r\n            }\r\n        ];\r\n    }\r\n}\r\n\r\n[\r\n    { direction: 'horizontal', anchor: [0, 0], length: 0 }\r\n]","import EventEmitter from '../lib/EventEmitter';\r\n\r\nexport interface SceneOptions {\r\n    wrapperSelector: string;\r\n    startButtonSelector: string;\r\n    playAgainButtonSelector: string;\r\n    defaultScene: Scene;\r\n}\r\n\r\nexport enum Scene {\r\n    START,\r\n    GAME,\r\n    GAME_OVER,\r\n};\r\n\r\nexport class SceneManager {\r\n    private wrapper: HTMLElement;\r\n    private startButton: HTMLElement;\r\n    private playAgainButton: HTMLElement;\r\n    private currentScene: Scene;\r\n\r\n    constructor(options: SceneOptions) {\r\n        const { wrapperSelector, startButtonSelector, playAgainButtonSelector, defaultScene } = options;\r\n\r\n        this.wrapper = document.querySelector(wrapperSelector);\r\n        this.startButton = document.querySelector(startButtonSelector);\r\n        this.playAgainButton = document.querySelector(playAgainButtonSelector);\r\n        this.currentScene = defaultScene;\r\n\r\n        this.bindUIEvents();\r\n    }\r\n\r\n    private bindUIEvents(): void {\r\n        window.addEventListener('click', (event) => {\r\n            const target = event.target as HTMLElement;\r\n\r\n            if ([this.startButton, this.playAgainButton].includes(target)) {\r\n                this.changeScene(Scene.GAME);\r\n            }\r\n        }, false);\r\n    }\r\n\r\n    public changeScene(nextScene: Scene): void {\r\n        this.wrapper.classList.remove(`scene-${this.currentScene}`);\r\n        this.wrapper.classList.add(`scene-${nextScene}`);\r\n        this.currentScene = nextScene;\r\n\r\n        EventEmitter.emit('changeScene', nextScene);\r\n    }\r\n}","import { Snake, SnakeElementDirection } from \"./Snake\";\r\nimport { Scene } from './SceneManager';\r\nimport EventEmitter from '../lib/EventEmitter';\r\n\r\nexport interface RendererOptions {\r\n    canvasSelector: string;\r\n    pointColor: string;\r\n    boardColor: string;\r\n    snakeColor: string;\r\n    collisionColor: string;\r\n    snake: Snake;\r\n}\r\n\r\nconst GRID_SIZE = 16;\r\n\r\nexport class Renderer {\r\n    canvas: HTMLCanvasElement;\r\n    context: CanvasRenderingContext2D;\r\n    snakeColor: string;\r\n    boardColor: string;\r\n    pointColor: string;\r\n    collisionColor: string;\r\n    isRendering: boolean = false;\r\n    startTimestamp: number;\r\n    lastTimestamp: number | null;\r\n    snake: Snake;\r\n\r\n    constructor(options: RendererOptions) {\r\n        const { canvasSelector, snake, snakeColor, boardColor, pointColor, collisionColor } = options;\r\n\r\n        this.canvas = document.querySelector(canvasSelector);\r\n        this.context = this.canvas.getContext('2d');\r\n        this.snake = snake;\r\n        Object.assign(this, { snakeColor, boardColor, pointColor, collisionColor });\r\n\r\n\r\n        this.fitCanvasToScreen();\r\n        this.handleSceneChange();\r\n    }\r\n\r\n    private startRendering(): void {\r\n        const { width, height } = this.canvas;\r\n        const [ areaWidth, areaHeight ] = [width / GRID_SIZE, height / GRID_SIZE];\r\n\r\n        this.isRendering = true;\r\n        this.startTimestamp = this.lastTimestamp = performance.now();\r\n        EventEmitter.emit('startRender', [areaWidth, areaHeight]);\r\n\r\n        requestAnimationFrame(this.render.bind(this));\r\n    }\r\n\r\n    private stopRendering(): void {\r\n        this.isRendering = false;\r\n    }\r\n\r\n    private handleSceneChange(): void {\r\n        EventEmitter.on('changeScene', (scene: Scene) => {\r\n            if (scene === Scene.GAME) {\r\n                this.startRendering();\r\n            } else {\r\n                this.stopRendering();\r\n            }\r\n        });\r\n    }\r\n\r\n    private fitCanvasToScreen(): void {\r\n        const { canvas } = this;\r\n        const { innerWidth, innerHeight } = window;\r\n\r\n        const width = innerWidth - (innerWidth % GRID_SIZE);\r\n        const height = innerHeight - (innerHeight % GRID_SIZE);\r\n\r\n        Object.assign(canvas, { width, height });\r\n    }\r\n\r\n    private getCurrentVelocity(): number {\r\n        return 0.25; //units per second\r\n    }\r\n\r\n    private getTimeDelta(currentTimestamp: number): number {\r\n        let timeDelta = 0;\r\n        if (this.lastTimestamp) {\r\n            timeDelta = currentTimestamp - this.lastTimestamp;\r\n        }\r\n\r\n        this.lastTimestamp = currentTimestamp;\r\n        return timeDelta;\r\n    }\r\n\r\n    private drawLine(startPoint: [number, number], endPoint: [number, number], lineWidth: number = GRID_SIZE, lineColor?: string, lineCap: CanvasLineCap = 'round') {\r\n        const { context } = this;\r\n\r\n        context.lineWidth = lineWidth;\r\n        context.lineCap = lineCap;\r\n        if (lineColor) context.strokeStyle = lineColor;\r\n\r\n        context.beginPath();\r\n        context.moveTo(...startPoint);\r\n        context.lineTo(...endPoint);\r\n        context.stroke();\r\n    }\r\n\r\n    private renderBoard(): void {\r\n        const { canvas, context, boardColor, collisionColor } = this;\r\n\r\n        context.fillStyle = boardColor;\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        context.fillStyle = collisionColor;\r\n\r\n        context.strokeStyle = collisionColor;\r\n        const lineOffset = GRID_SIZE / 2\r\n        this.drawLine([lineOffset, lineOffset], [canvas.width - lineOffset, lineOffset]);\r\n        this.drawLine([lineOffset, lineOffset], [lineOffset, canvas.height - lineOffset]);\r\n        this.drawLine([lineOffset, canvas.height - lineOffset], [canvas.width - lineOffset, canvas.height - lineOffset]);\r\n        this.drawLine([canvas.width - lineOffset, lineOffset], [canvas.width - lineOffset, canvas.height - lineOffset]);\r\n    }\r\n\r\n    private renderSnake(): void {\r\n        const { snakeColor, snake } = this;\r\n\r\n        const elements = snake.getElements();\r\n        elements.forEach(element => {\r\n            const { direction, anchor, length } = element;\r\n\r\n            const startPoint = anchor.map(value => value * GRID_SIZE) as [number, number];\r\n            let endPoint: [number, number];\r\n\r\n            if (direction === SnakeElementDirection.HORIZONTAL) {\r\n                endPoint = [\r\n                    anchor[0] * GRID_SIZE + length * GRID_SIZE,\r\n                    anchor[1] * GRID_SIZE\r\n                ];\r\n            } else {\r\n                endPoint = [\r\n                    anchor[0] * GRID_SIZE,\r\n                    anchor[1] * GRID_SIZE + length * GRID_SIZE\r\n                ];\r\n            }\r\n\r\n\r\n            this.drawLine(startPoint, endPoint, GRID_SIZE, snakeColor, 'round');\r\n        });\r\n    }\r\n\r\n    private renderInfo(timeDelta: number): void {\r\n        const { canvas, context } = this;\r\n        const framesPerSecond = Math.round(1000 / timeDelta);\r\n\r\n        context.fillStyle = 'white';\r\n        context.textAlign = 'right';\r\n\r\n        context.font = '20px \"Lato\", sans-serif';\r\n        context.fillText(`SCORE: ${0}`, canvas.width - GRID_SIZE * 2, GRID_SIZE * 3);\r\n        context.fillText(`FPS: ${framesPerSecond}`, canvas.width - GRID_SIZE * 2, GRID_SIZE * 3 + 24);\r\n    }\r\n\r\n    private render(currentTimestamp: number): void {\r\n        if (!this.isRendering) return;\r\n        requestAnimationFrame(this.render.bind(this));\r\n\r\n        const timeDelta = this.getTimeDelta(currentTimestamp);\r\n        const currentVelocity = this.getCurrentVelocity();\r\n        const unitsToMove = timeDelta * currentVelocity;\r\n        \r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        this.renderBoard();\r\n        this.renderInfo(timeDelta);\r\n        this.renderSnake();\r\n    }\r\n}","import { Renderer } from './Renderer';\r\nimport { SceneManager, Scene } from './SceneManager';\r\nimport { Snake } from './Snake';\r\n\r\nexport interface GameOptions {\r\n    canvasSelector: string\r\n    wrapperSelector: string;\r\n    startButtonSelector: string;\r\n    playAgainButtonSelector: string;\r\n    scoreSelector: string;\r\n    boardColor: string;\r\n    snakeColor: string;\r\n    pointColor: string;\r\n    collisionColor: string;\r\n\r\n}\r\n\r\nexport class Game {\r\n    renderer: Renderer;\r\n    sceneManager: SceneManager;\r\n    snake: Snake;\r\n    currentPoint: [number, number];\r\n\r\n    constructor(options: GameOptions) {\r\n        const {\r\n            canvasSelector, wrapperSelector, startButtonSelector,\r\n            playAgainButtonSelector, boardColor, snakeColor, pointColor,\r\n            collisionColor\r\n        } = options;\r\n\r\n        this.snake = new Snake();\r\n        this.renderer = new Renderer({\r\n            canvasSelector,\r\n            pointColor,\r\n            boardColor,\r\n            snakeColor,\r\n            collisionColor,\r\n            snake: this.snake\r\n        });\r\n        this.sceneManager = new SceneManager({\r\n            defaultScene: Scene.START,\r\n            wrapperSelector,\r\n            startButtonSelector,\r\n            playAgainButtonSelector\r\n        });\r\n    }\r\n}","export const boardColor = '#11151b';\r\nexport const snakeColor = '#16a085';\r\nexport const pointColor = '#f1c40f';\r\nexport const collisionColor = '#c0392b';","import { Game } from './core/Game';\r\nimport { snakeColor, boardColor, pointColor, collisionColor } from './utils/colors';\r\n\r\nnew Game({\r\n    boardColor, snakeColor, pointColor, collisionColor,\r\n\r\n    canvasSelector: '#game',\r\n    wrapperSelector: '#scene-wrapper',\r\n    startButtonSelector: '#start-game',\r\n    playAgainButtonSelector: '#play-again',\r\n    scoreSelector: '#result',\r\n});"],"names":["EventEmitter"],"mappings":"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"}