{"version":3,"file":"index.js","sources":["../../src/core/Renderer.ts","../../src/lib/EventEmitter.ts","../../src/core/SceneManager.ts","../../src/core/Snake.ts","../../src/core/Game.ts","../../src/index.ts"],"sourcesContent":["export interface RendererOptions {\r\n    canvasSelector: string;\r\n    pointColor: string;\r\n    boardColor: string;\r\n    snakeColor: string;\r\n}\r\n\r\nexport class Renderer {\r\n    canvas: HTMLCanvasElement;\r\n    context: CanvasRenderingContext2D;\r\n    isRendering: boolean = false;\r\n    startTimestamp: number;\r\n    lastTimestamp: number | null;\r\n\r\n    constructor(options: RendererOptions) {\r\n        const { canvasSelector } = options;\r\n\r\n        this.canvas = document.querySelector(canvasSelector);\r\n        this.context = this.canvas.getContext('2d');\r\n\r\n        this.fitCanvasToScreen();\r\n    }\r\n\r\n    private fitCanvasToScreen(): void {\r\n        const { canvas } = this;\r\n        const { innerWidth: width, innerHeight: height } = window;\r\n\r\n        Object.assign(canvas, { width, height });\r\n    }\r\n\r\n    private getTimeDelta(currentTimestamp: number): number {\r\n        let timeDelta = 0;\r\n        if (this.lastTimestamp) {\r\n            timeDelta = currentTimestamp - this.lastTimestamp;\r\n        }\r\n\r\n        this.lastTimestamp = currentTimestamp;\r\n        return timeDelta;\r\n    }\r\n\r\n    private renderBoard(): void {\r\n        const { canvas, context } = this;\r\n\r\n        context.fillStyle = \r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    private render(currentTimestamp: number): void {\r\n        if (!this.isRendering) return;\r\n        requestAnimationFrame(this.render);\r\n\r\n        const timeDelta = this.getTimeDelta(currentTimestamp);\r\n        \r\n        this.renderBoard();\r\n    }\r\n}","type Handler = (payload?: any) => any;\r\nconst _handlers: Record<string, Handler[]> = {};\r\n\r\nclass EventEmitter {\r\n    on(eventName: string, handler: Handler) {\r\n        const currentHandlers = _handlers[eventName];\r\n        const newHandlers = currentHandlers ? [...currentHandlers, handler] : [handler];\r\n\r\n        _handlers[eventName] = newHandlers;\r\n    }\r\n\r\n    off(eventName: string, handler: Handler) {\r\n        _handlers[eventName] = _handlers[eventName].filter(item => item !== handler);\r\n    }\r\n\r\n    emit(eventName: string, payload: any) {\r\n        const handlers = _handlers[eventName];\r\n        if (!handlers) return;\r\n        \r\n        handlers.forEach(handler => handler(payload));\r\n    }\r\n}\r\n\r\nexport default new EventEmitter();","import EventEmitter from '../lib/EventEmitter';\r\n\r\nexport interface SceneOptions {\r\n    wrapperSelector: string;\r\n    startButtonSelector: string;\r\n    playAgainButtonSelector: string;\r\n    defaultScene: Scene;\r\n}\r\n\r\nexport enum Scene {\r\n    START,\r\n    GAME,\r\n    GAME_OVER,\r\n};\r\n\r\nexport class SceneManager {\r\n    private wrapper: HTMLElement;\r\n    private startButton: HTMLElement;\r\n    private playAgainButton: HTMLElement;\r\n    private currentScene: Scene;\r\n\r\n    constructor(options: SceneOptions) {\r\n        const { wrapperSelector, startButtonSelector, playAgainButtonSelector, defaultScene } = options;\r\n\r\n        this.wrapper = document.querySelector(wrapperSelector);\r\n        this.startButton = document.querySelector(startButtonSelector);\r\n        this.playAgainButton = document.querySelector(playAgainButtonSelector);\r\n        this.currentScene = defaultScene;\r\n\r\n        this.bindUIEvents();\r\n    }\r\n\r\n    private bindUIEvents(): void {\r\n        window.addEventListener('click', (event) => {\r\n            const target = event.target as HTMLElement;\r\n\r\n            if ([this.startButton, this.playAgainButton].includes(target)) {\r\n                this.changeScene(Scene.GAME);\r\n            }\r\n        }, false);\r\n    }\r\n\r\n    public changeScene(nextScene: Scene): void {\r\n        this.wrapper.classList.remove(`scene-${this.currentScene}`);\r\n        this.wrapper.classList.add(`scene-${nextScene}`);\r\n        this.currentScene = nextScene;\r\n\r\n        EventEmitter.emit('changeScene', nextScene);\r\n    }\r\n}","import { Direction } from '../utils/interfaces';\r\n\r\nexport class Snake {\r\n    elements: number[][];\r\n    direction: Direction;\r\n    color: string;\r\n\r\n    \r\n}","import { Renderer } from './Renderer';\r\nimport { SceneManager, Scene } from './SceneManager';\r\nimport { Snake } from './Snake';\r\n\r\nexport interface GameOptions {\r\n    canvasSelector: string\r\n    wrapperSelector: string;\r\n    startButtonSelector: string;\r\n    playAgainButtonSelector: string;\r\n    scoreSelector: string;\r\n    boardColor: string;\r\n    snakeColor: string;\r\n    pointColor: string;\r\n}\r\n\r\nexport class Game {\r\n    renderer: Renderer;\r\n    sceneManager: SceneManager;\r\n    snake: Snake;\r\n    currentPoint: [number, number];\r\n\r\n    constructor(options: GameOptions) {\r\n        const {\r\n            canvasSelector, wrapperSelector, startButtonSelector,\r\n            playAgainButtonSelector, scoreSelector, boardColor,\r\n            snakeColor, pointColor\r\n        } = options;\r\n\r\n        this.snake = new Snake();\r\n        // this.board = new Board();\r\n        this.renderer = new Renderer({ canvasSelector, pointColor, boardColor, snakeColor });\r\n        this.sceneManager = new SceneManager({\r\n            defaultScene: Scene.START,\r\n            wrapperSelector,\r\n            startButtonSelector,\r\n            playAgainButtonSelector\r\n        });\r\n    }\r\n}","import { Game } from './core/Game';\r\n\r\nnew Game({\r\n    canvasSelector: '#game',\r\n    wrapperSelector: '#scene-wrapper',\r\n    startButtonSelector: '#start-game',\r\n    playAgainButtonSelector: '#play-again',\r\n    scoreSelector: '#result',\r\n\r\n    boardColor: 'rgba(0, 0, 0, .5)',\r\n    snakeColor: 'lime',\r\n    pointColor: 'purple'\r\n});"],"names":["EventEmitter"],"mappings":"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"}